'use strict';

var util     = require('util');
var Bot      = require('slackbots');
var Https    = require('https');
var XMLParse = require('xml2js');

var Config = require('../toolbot_config.json');

var ToolBot = function Constructor(settings) {
    this.settings = settings;
    this.settings.name = this.settings.name || 'toolbot';

    this.dictionaryAPI = Config.dictionaryAPI;

    this.keywords = {
        define: 'Retrieve the definition of the following word from Google'
    };
};

util.inherits(ToolBot, Bot);
module.exports = ToolBot;


ToolBot.prototype.run = function() {
    ToolBot.super_.call(this, this.settings);

    this.on('start', this._onStart);
    this.on('message', this._onMessage);
};


ToolBot.prototype._addKeywords = function(keywordStorage) {
    keywordStorage.forEach( function(sublist) {
        sublist.forEach( function(keyword) {
            this.keywords.push(keyword);
        })
    })
};

ToolBot.prototype._onStart = function() {
    this._getBotUserInfo();
    this._welcomeMessage();
    this._testUrlConnection();
};

ToolBot.prototype._getBotUserInfo = function() {
    var self = this;
    this.user = this.users.filter(function(user) {
        return user.name === self.name;
    })[0];
};

ToolBot.prototype._welcomeMessage = function() {
    this.postMessageToChannel(
        this.channels[0].name, 
        "I am a ToolBot, I'm here to help out!"
    );
};

ToolBot.prototype._onMessage = function(message) {
    var keyword;

    if (this._isChatMessage(message) && this._isNotFromSelf(message) 
        && (keyword = this._hasKeyword(message)) && this._isNotFromBot(message)) {
        
        this._handleMessage(keyword, message);
    }
};

ToolBot.prototype._isChatMessage = function(message) {
    if (message.type === 'message' && message.text != null) {
        return true;
    }
    return false;
};

ToolBot.prototype._isNotFromSelf = function(message) {
    if (message.username === this.user.name) {
        return false;
    }
    return true;
};

ToolBot.prototype._hasKeyword = function(message) {
    var result = false;

    Object.keys(this.keywords).forEach(function(keyword) {
        if (message.text.toLowerCase().indexOf('.' + keyword + ' ') ==  0) {
            result = keyword;
        }
    });
    return result;
};

ToolBot.prototype._isNotFromBot = function(message) {
    if (message.subtype === 'bot_message') {
        return false;
    }
    return true;
};

ToolBot.prototype._handleMessage = function(keyword, message) {
    this.postMessageToChannel(this.channels[0].name, "I heard: " + message.text);

    switch (keyword) {
        case 'define':
            this._handleDefineKeyword(message);
            break;
    }
};


/*****************************************************************************
 * DefineBot Functions
 *****************************************************************************/

ToolBot.prototype._handleDefineKeyword = function(message) {
    this._prepDefineMessage(message.text);
    this._getDefinitionHeaders();
    this._defineWord();

    return true;
};

ToolBot.prototype._testUrlConnection = function() {
    var options = {
        host: "www.google.com",
        path: "/index.html"
    };
    
    var bot = this;

    Https.get(options, function(response) {
        var message = null;

        response.on('data', function(chunk) {
            message += chunk;
        });
        response.on('end', function() {
            console.log("message: ");
            console.log(message);
        });
    });

    return true;
};

ToolBot.prototype._prepDefineMessage = function(message) {
    var word = message.replace('.define ', '') || '';

    this.dictionaryAPI.word = word;

    return word;
};

ToolBot.prototype._getDefinitionHeaders = function() {
    var headers = {
        'Accept':    this.dictionaryAPI.formatAccept,
        'accessKey': this.dictionaryAPI.apiKey
    };

    this.dictionaryAPI.headers = headers;

    return headers;
};


ToolBot.prototype._defineWord = function() {
    var pageSize = 1;
    var pageIndex = 1;
    var urlPath = 
        "/api/v1/dictionaries/" 
        + this.dictionaryAPI.languageCode 
        + "/search/?q=" 
        + this.dictionaryAPI.word 
        + "&pagesize=" 
        + pageSize 
        + "&pageindex=" 
        + pageIndex;

    
    var options = {
        host: this.dictionaryAPI.apiUrlBase,
        path: urlPath,
        method: 'GET',
        headers: this.dictionaryAPI.headers
    };

    var bot = this;

    Https.get(options, function(response) {
        var message = '';

        response.on('data', function(chunk) {
            message += chunk;
        });
        response.on('end', function() {
            var msgParsed = JSON.parse(message);
            bot.dictionaryAPI.definitionURL = msgParsed.results[0].entryUrl;
                    
            bot._getWordDefinition();
        });
        response.on('error', function(e) {
        });
    });
};

ToolBot.prototype._getWordDefinition = function() {
    var urlPath = this.dictionaryAPI.definitionURL.split("api.collinsdictionary.com")[1] + "?format=xml";

    var options = {
        host: this.dictionaryAPI.apiUrlBase,
        path: urlPath,
        method: 'GET',
        headers: this.dictionaryAPI.headers
    };

    var bot = this;

    Https.get(options, function(response) {
        var message = '';

        response.on('data', function(chunk) {
            message += chunk;
        });
        response.on('end', function() {
            bot.dictionaryAPI.definitionMessage = JSON.parse(message);
            bot._convertDefinitionResponseToMessage(bot.dictionaryAPI.definitionMessage);
        });
    });
    
    return true;
};

ToolBot.prototype._convertDefinitionResponseToMessage = function(message) {
    this.dictionaryAPI.definition = "*" + this.dictionaryAPI.word + "* ";

    var bot = this;

    if (!message) {
        this.dictionaryAPI.definition += "not found.\n";
    } else {
        this.dictionaryAPI.definition += "\n";
        XMLParse.parseString(message.entryContent, function(e, result) {
            result = JSON.parse(JSON.stringify(result));
            result = result.entry.hom;

            result.forEach(function (elem, ind) {
                bot.dictionaryAPI.definition += "  > " + elem.sense[0].def[0] + "\n";    
            });

        });
    }

    return this.dictionaryAPI.definition; 
};

ToolBot.prototype._respondWithDefinition = function(response) {
    this.postMessageToChannel('general', response);

    return true;
};




